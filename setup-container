#!/usr/bin/env bash
set -eu

function bootstrap-container {
  install-packages debian-archive-keyring debootstrap
  if ! sudo ls /var/lib/machines/ocitysmap &> /dev/null; then
    if ! sudo debootstrap stretch /var/lib/machines/ocitysmap; then
      sudo rm -fr /var/lib/machines/ocitysmap
      return 1
    fi
  fi
}

function configure-apt {
  sudo tee /var/lib/machines/ocitysmap/etc/apt/apt.conf.d/50disable-cache > /dev/null <<< 'Binary::apt::APT::Keep-Downloaded-Packages "false";'
}

function configure-hosts {
  sudo sed -i 's/\tlocalhost$/\0 ocitysmap/' /var/lib/machines/ocitysmap/etc/hosts
}

function configure-mapnik {
  sudo ls /var/lib/machines/ocitysmap/root/mapnik/inc/datasource-settings.xml.inc &> /dev/null || run-nspawn-bash -c 'cd ./mapnik && python ./generate_xml.py --dbname=maposmatic --host=localhost --password=maposmatic --port=5432 --user=maposmatic'
  sudo sed -i 's/\(&maxscale_zoom\)17/\115/; s/\(<TextSymbolizer \).*\(\bsize\)/\1halo-radius="1" \2/' /var/lib/machines/ocitysmap/root/mapnik/inc/layer-addressing.xml.inc
  sudo sed -i 's/\(^ *\).*\(<Filter>\[amenity\] = '\''parking'\''\)/\1\&minscale_zoom1;\2/' /var/lib/machines/ocitysmap/root/mapnik/inc/layer-amenity-points.xml.inc
  sudo sed -i 's/^&layer-shapefiles;/<!--\0-->/' /var/lib/machines/ocitysmap/root/mapnik/osm.xml
  sudo perl -0p -e 's/(<Filter>\[highway\] = '\''unclassified'\''.+?&minscale_zoom)\d+(.+?<TextSymbolizer ).*?(\bsize)/${1}16$2allow-overlap="true" $3/s' -i /var/lib/machines/ocitysmap/root/mapnik/osm.xml
}

function configure-ocitysmap {
  sudo cp /var/lib/machines/ocitysmap/root/{ocitysmap/ocitysmap.conf.dist,.ocitysmap.conf}
  sudo sed -i -f - /var/lib/machines/ocitysmap/root/.ocitysmap.conf << \EOF
  s/\(^available_stylesheets: \).*/\1stylesheet_osm1/
  s/\(^password=\).*/\1maposmatic/
  s|\(^path: \).*/mapnik\b.*|\1/root/mapnik/osm.xml|
EOF
}

function create-database {
  if ! sudo ls /var/lib/machines/ocitysmap/var/lib/maposmatic-database &> /dev/null; then
    run-nspawn-bash << \EOF
    /etc/init.d/postgresql start
    sudo -u postgres psql -c '\du' | grep -q ' maposmatic ' || sudo -u postgres psql -c "CREATE ROLE maposmatic LOGIN PASSWORD 'maposmatic'"
    sudo -u postgres psql -c '\l' | grep -q ' maposmatic ' || sudo -u postgres createdb -O maposmatic maposmatic
EOF
    sudo touch /var/lib/machines/ocitysmap/var/lib/maposmatic-database
  fi
}

function install-container-packages {
  run-nspawn-bash -l -c 'dpkg -s "$@" &> /dev/null || apt install -y "$@"' -- "$@"
}

function install-packages {
  if command -v dpkg > /dev/null; then
    dpkg -s "$@" &> /dev/null || sudo apt install -y "$@"
  elif command -v pacman > /dev/null; then
    pacman -Q "$@" &> /dev/null || sudo pacman -Sy --needed --noconfirm "$@"
  fi
}

function install-pip-packages {
  install-container-packages python-pip
  local name
  for name; do
    sudo sh -c 'ls /var/lib/machines/ocitysmap/usr/local/lib/python2.7/dist-packages/"$1"-* &> /dev/null' -- "$name" || run-nspawn pip install "$name"
  done
}

function main {
  bootstrap-container
  setup-container
  setup-locale
  setup-postgresql
  setup-mapnik
  setup-ocitysmap
}

function patch-ocitysmap {
  sudo sed -i 's/\bGeorgia /DejaVu /' /var/lib/machines/ocitysmap/root/ocitysmap/ocitysmap/{draw_utils.py,indexlib/multi_page_renderer.py}
  sudo sed -i 's/\( PRINT_SAFE_MARGIN_PT = \).*/\10/' /var/lib/machines/ocitysmap/root/ocitysmap/ocitysmap/layoutlib/abstract_renderer.py
  sudo sed -i -f - /var/lib/machines/ocitysmap/root/ocitysmap/ocitysmap/layoutlib/multi_page_renderer.py << \EOF
  s/\( *\).*\(\bself\._draw_overview_labels\b\)/\1ctx.save(); ctx.set_font_size(16); draw_utils.draw_simpletext_center(ctx, self.rc.title, self._usable_area_width_pt \/ 2, 30); ctx.restore(); draw_utils.draw_simpletext_center(ctx, 'Â© OpenStreetMap contributors, CC-BY-SA', self._usable_area_width_pt \/ 2, self._usable_area_height_pt - 30); \2/
  s/\( *\).*\(\bself\._render_\(blank\|front\)_page(\)/\1#\2/
  s/\( *\).*\(\bmap_canvas\.add_shape_file(\(shade\|shade_contour\)\b\)/\1False and \2/
  s/\( *\).*\(\bself\.rc\.stylesheet\.grid_line_width\b\)/\10.1 or \2/
  s/\( width_adjust=\).*\(,\)/\10.9\2/
  s/\(\.render_page_number(ctx, \)3\b/\11/
  s/\( unicode(idx+\)4\b/\12/
  s/\( map_number+\)4\b/\12/
  s/\( nb_previous_pages = \)4/\12/
  s/\(  map_number+\)5/\13/
  s/\( page_number=(i + \)4/\12/
  s/\( *\).*\(\mpsir = MultiPageStreetIndexRenderer\b\)/\1import toc; toc.generate(self.rc.title, map_number + 3, self.index_categories); \2/
  s/\( *\).*\(\bself\._render_overview_page\b\)/\1open('.\/links.ps', 'w').close(); \2/
  s|\( *\).*\(\bdraw_utils\.draw_text_adjusted(ctx, unicode(idx\b\)|\1file = open('./links.ps', 'a'); file.write('[ /Page {} /Rect [{} {} {} {}] /SrcPg {} /Subtype /Link /ANN pdfmark\\n'.format(idx + 2, x - w / 2, area_height_dots - y - h / 2, x + w / 2, area_height_dots - y + h / 2, 1)); file.close(); \2|
  s/\(_arrow = \).*\(self\.page_disposition\b\)/\1arrow = \2/
  s|\( *\).*\(\bself\._draw_arrow\b\)|\1file = open('./links.ps', 'a'); file.write('[ /Page {} /Rect [{} {} {} {}] /SrcPg {} /Subtype /Link /ANN pdfmark\\n'.format(arrow + nb_previous_pages, ctx.user_to_device(0, 0)[0] - 15, self._usable_area_height_pt - ctx.user_to_device(0, 0)[1] - 15, ctx.user_to_device(0, 0)[0] + 30, self._usable_area_height_pt - ctx.user_to_device(0, 0)[1] + 30, map_number + 2)); file.close(); \2|
EOF
  sudo sed -i "s/\(\[\).*\(('Din A4'\)/\1('Din A5', 148, 210), \2/" /var/lib/machines/ocitysmap/root/ocitysmap/ocitysmap/layoutlib/__init__.py
  sudo tee /var/lib/machines/ocitysmap/root/ocitysmap/ocitysmap/layoutlib/toc.py > /dev/null << \EOF
def encode(string):
  return ''.join('{:02X}'.format(ord(byte)) for byte in '\xfe\xff' + string.encode('utf-16-be'))
def generate(title, index_page, categories):
  with open('./toc.ps', 'w') as file:
    file.write('[ /Title <{}> /DOCINFO pdfmark\n'.format(encode(title)))
    file.write('[ /Page {} /Title (Index) /OUT pdfmark\n'.format(index_page))
    for category in categories:
      items = [item for item in category.items if item.label]
      file.write('[ /Count {} /Title <{}> /OUT pdfmark\n'.format(len(items), encode(category.name)))
      for item in items:
        file.write('[ /Page {} /Title <{}> /OUT pdfmark\n'.format(item.page_number, encode('{} ({})'.format(item.label, item.location_str.split(', ')[-1]))))
EOF
}

function run-nspawn {
  command -v systemd-nspawn &> /dev/null || install-packages systemd-container
  sudo systemd-nspawn -q -M ocitysmap --chdir=/root "$@"
}

function run-nspawn-bash {
  run-nspawn bash -eu"$-" "$@"
}

function setup-container {
  configure-apt
  configure-hosts
  install-container-packages ghostscript
  update-apt-cache
}

function setup-locale {
  install-container-packages locales
  sudo sed -i 's/^# \(en_US\.UTF-8 \)/\1/' /var/lib/machines/ocitysmap/etc/locale.gen
  sudo ls /var/lib/machines/ocitysmap/usr/lib/locale/locale-archive &> /dev/null || run-nspawn bash -l locale-gen
  sudo tee /var/lib/machines/ocitysmap/etc/profile.d/locale.sh > /dev/null <<< 'export LANG=en_US.UTF-8'
}

function setup-mapnik {
  install-container-packages python-mapnik subversion unzip
  sudo ls /var/lib/machines/ocitysmap/root/mapnik &> /dev/null || run-nspawn svn co https://svn.openstreetmap.org/applications/rendering/mapnik
  configure-mapnik
}

function setup-ocitysmap {
  install-container-packages git python-{cairo,gdal,gtk2,psycopg2,qrcode,rsvg,shapely}
  install-pip-packages colour pluginbase
  sudo ls /var/lib/machines/ocitysmap/root/ocitysmap &> /dev/null || run-nspawn git -C /root clone --depth=1 https://github.com/hholzgra/ocitysmap.git
  configure-ocitysmap
  patch-ocitysmap
}

function setup-postgis {
  if ! sudo ls /var/lib/machines/ocitysmap/var/lib/maposmatic-postgis &> /dev/null; then
    install-container-packages postgis
    run-nspawn-bash << \EOF
    /etc/init.d/postgresql start
    for path in /usr/share/postgresql/*/contrib/postgis-*/{postgis,spatial_ref_sys}.sql; do
      sudo -u postgres psql -d maposmatic -f "$path"
    done
    for name in geometry_columns spatial_ref_sys; do
      sudo -u postgres psql -c "ALTER TABLE $name OWNER TO maposmatic" -d maposmatic
    done
    sudo -u postgres psql -c 'CREATE EXTENSION IF NOT EXISTS hstore' -d maposmatic
EOF
    sudo touch /var/lib/machines/ocitysmap/var/lib/maposmatic-postgis
  fi
}

function setup-postgresql {
  install-container-packages osm2pgsql postgresql postgresql-contrib sudo
  create-database
  setup-postgis
}

function update-apt-cache {
  sudo ls /var/lib/machines/ocitysmap/var/cache/apt/pkgcache.bin &> /dev/null || run-nspawn apt update
}

main "$@"
